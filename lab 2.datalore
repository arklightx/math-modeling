{
  "version":"1.0",
  "data":{
    "sheets":[
      {
        "name":"Sheet",
        "blocks":[
          {
            "type":"CODE",
            "text":"import random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "meta":{
              
            },
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"def try_another_poisson_variant(lam, n=1):\n    lst = []\n    for i in range(n):\n        r = random.uniform(0, 1)\n        pr = r\n        k = 0\n        while pr > math.exp(-lam):\n            r = random.uniform(0, 1)\n            pr *= r\n            k += 1\n        x = k\n        lst.append(x)\n    return lst",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "meta":{
              
            },
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"arr = try_another_poisson_variant(40, 500)\nprint(f\"Мат. ожидание: {np.mean(arr)}\")\nprint(f\"Дисперсия: {np.var(arr)}\")\nprint(f\"Стандартное отклонение: {np.std(arr)}\")\nplt.hist(arr)\nplt.show()",
            "outputs":[
              {
                "stdout":"Мат. ожидание: 39.858\nДисперсия: 35.973836000000006\nСтандартное отклонение: 5.99781927036819\n",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  {
                    "image":"iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAQhUlEQVR4nO3df6zddX3H8edLKiq4WZC7pmvJbqNEw8wEcocYFuNgc1WMZQkhEOc616QzQ6fTDApLxpbMpGSbiMlGUgGpG+NHUEMjzkkQY5YM9PJDfhVnh0XaFHqN4s9EV33vj\/OtO7nc9t5zzr33XD57PpKbe76f7\/fc7yuf9vvqt5+ec5qqQpLUlheNO4AkafFZ7pLUIMtdkhpkuUtSgyx3SWrQqnEHADjppJNqcnJy3DEk6QXl\/vvv\/3ZVTcy1b0WU++TkJNPT0+OOIUkvKEmeOtI+l2UkqUGWuyQ1yHKXpAbNW+5JbkhyMMmjc+z7UJJKclK3nSQfS7InycNJzliK0JKko1vInfuNwMbZg0lOBt4CfKtv+K3AKd3XVuDa0SNKkgY1b7lX1ZeB78yx62rgUqD\/k8c2AZ+snnuB1UnWLkpSSdKCDbXmnmQTsL+qvjZr1zrg6b7tfd3YXD9ja5LpJNMzMzPDxJAkHcHA5Z7kOOAK4K9GOXFV7aiqqaqampiY8zX4kqQhDfMmplcBG4CvJQFYDzyQ5ExgP3By37HruzFJ0jIauNyr6hHgVw5vJ9kLTFXVt5PsAt6b5BbgDcD3qurAYoWVxmFy251jOe\/e7eeN5bxqw0JeCnkz8J\/Aa5LsS7LlKId\/DngS2AN8HPjTRUkpSRrIvHfuVXXxPPsn+x4XcMnosSRJo\/AdqpLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNmrfck9yQ5GCSR\/vG\/i7JE0keTvKZJKv79l2eZE+Sryf5vSXKLUk6ioXcud8IbJw1dhfwuqr6DeC\/gMsBkpwKXAT8evecf0pyzKKllSQtyLzlXlVfBr4za+wLVXWo27wXWN893gTcUlU\/qapvAnuAMxcxryRpARZjzf2PgX\/rHq8Dnu7bt68be54kW5NMJ5memZlZhBiSpMNGKvckfwkcAm4a9LlVtaOqpqpqamJiYpQYkqRZVg37xCR\/BLwdOLeqqhveD5zcd9j6bkyStIyGunNPshG4FHhHVf24b9cu4KIkL0myATgF+MroMSVJg5j3zj3JzcCbgZOS7AOupPfqmJcAdyUBuLeq3lNVjyW5DXic3nLNJVX1s6UKL0ma27zlXlUXzzF8\/VGO\/zDw4VFCSZJG4ztUJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQUN\/cJi0nCa33TnuCNILinfuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSg+Yt9yQ3JDmY5NG+sROT3JXkG933E7rxJPlYkj1JHk5yxlKGlyTNbSF37jcCG2eNbQPurqpTgLu7bYC3Aqd0X1uBaxcnpiRpEPOWe1V9GfjOrOFNwM7u8U7g\/L7xT1bPvcDqJGsXKaskaYGGXXNfU1UHusfPAGu6x+uAp\/uO29eNPU+SrUmmk0zPzMwMGUOSNJeRP8+9qipJDfG8HcAOgKmpqYGfL7VuXJ9hv3f7eWM5rxbXsHfuzx5ebum+H+zG9wMn9x23vhuTJC2jYct9F7C5e7wZuKNv\/A+7V82cBXyvb\/lGkrRM5l2WSXIz8GbgpCT7gCuB7cBtSbYATwEXdod\/DngbsAf4MfDuJcgsSZrHvOVeVRcfYde5cxxbwCWjhpIkjcZ3qEpSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1aKRyT\/LnSR5L8miSm5O8NMmGJPcl2ZPk1iTHLlZYSdLCDF3uSdYBfwZMVdXrgGOAi4CrgKur6tXAd4EtixFUkrRwoy7LrAJelmQVcBxwADgHuL3bvxM4f8RzSJIGNHS5V9V+4O+Bb9Er9e8B9wPPVdWh7rB9wLq5np9ka5LpJNMzMzPDxpAkzWGUZZkTgE3ABuBXgeOBjQt9flXtqKqpqpqamJgYNoYkaQ6jLMv8DvDNqpqpqv8BPg2cDazulmkA1gP7R8woSRrQKOX+LeCsJMclCXAu8DhwD3BBd8xm4I7RIkqSBjXKmvt99P7h9AHgke5n7QAuAz6YZA\/wSuD6RcgpSRrAqvkPObKquhK4ctbwk8CZo\/xcSdJofIeqJDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoNGKvckq5PcnuSJJLuTvDHJiUnuSvKN7vsJixVWkrQwq0Z8\/jXA56vqgiTHAscBVwB3V9X2JNuAbcBlI55HK8TktjvHHUHSAgx9557kFcCbgOsBquqnVfUcsAnY2R22Ezh\/tIiSpEGNsiyzAZgBPpHkwSTXJTkeWFNVB7pjngHWzPXkJFuTTCeZnpmZGSGGJGm2Ucp9FXAGcG1VnQ78iN4SzC9UVQE115OrakdVTVXV1MTExAgxJEmzjVLu+4B9VXVft307vbJ\/NslagO77wdEiSpIGNXS5V9UzwNNJXtMNnQs8DuwCNndjm4E7RkooSRrYqK+WeR9wU\/dKmSeBd9P7A+O2JFuAp4ALRzyHJGlAI5V7VT0ETM2x69xRfq4kaTS+Q1WSGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoNG\/T9UJTVmctudYzv33u3nje3crfHOXZIaZLlLUoNGLvckxyR5MMlnu+0NSe5LsifJrUmOHT2mJGkQi3Hn\/n5gd9\/2VcDVVfVq4LvAlkU4hyRpACOVe5L1wHnAdd12gHOA27tDdgLnj3IOSdLgRr1z\/yhwKfDzbvuVwHNVdajb3gesm+uJSbYmmU4yPTMzM2IMSVK\/ocs9yduBg1V1\/zDPr6odVTVVVVMTExPDxpAkzWGU17mfDbwjyduAlwK\/DFwDrE6yqrt7Xw\/sHz2mJGkQQ9+5V9XlVbW+qiaBi4AvVtU7gXuAC7rDNgN3jJxSkjSQpXid+2XAB5PsobcGf\/0SnEOSdBSL8vEDVfUl4Evd4yeBMxfj50qShuM7VCWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIatGrYJyY5GfgksAYoYEdVXZPkROBWYBLYC1xYVd8dPaoOm9x257gjSFrhRrlzPwR8qKpOBc4CLklyKrANuLuqTgHu7rYlScto6HKvqgNV9UD3+AfAbmAdsAnY2R22Ezh\/xIySpAEtypp7kkngdOA+YE1VHeh2PUNv2Wau52xNMp1kemZmZjFiSJI6I5d7kpcDnwI+UFXf799XVUVvPf55qmpHVU1V1dTExMSoMSRJfUYq9yQvplfsN1XVp7vhZ5Os7favBQ6OFlGSNKihyz1JgOuB3VX1kb5du4DN3ePNwB3Dx5MkDWPol0ICZwPvAh5J8lA3dgWwHbgtyRbgKeDCkRJKkgY2dLlX1X8AOcLuc4f9uZKk0fkOVUlq0CjLMpK0qMb17uu9288by3mXknfuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDfJTIUcwrk+wk6T5eOcuSQ2y3CWpQS7LSPp\/b5xLrEv1H4V45y5JDbLcJalBS1buSTYm+XqSPUm2LdV5JEnPtyRr7kmOAf4R+F1gH\/DVJLuq6vHFPpcvR5Sk51uqO\/czgT1V9WRV\/RS4Bdi0ROeSJM2yVK+WWQc83be9D3hD\/wFJtgJbu80fJvn6EmU5Cfj2Ev3sUZhrMOYajLkGM7Zcueqou+fL9WtH2jG2l0JW1Q5gx1KfJ8l0VU0t9XkGZa7BmGsw5hpMi7mWallmP3By3\/b6bkyStAyWqty\/CpySZEOSY4GLgF1LdC5J0ixLsixTVYeSvBf4d+AY4IaqemwpzrUAS770MyRzDcZcgzHXYJrLlapazCCSpBXAd6hKUoMsd0lqUDPlnuTkJPckeTzJY0ne342fmOSuJN\/ovp+wQnL9dZL9SR7qvt62nLm6DC9N8pUkX+uy\/U03viHJfd1HR9za\/aP4Ssh1Y5Jv9s3ZacuZq8twTJIHk3y22x7rXB0l19jnqsuxN8kjXYbpbmys1+RRcq2Ea3J1ktuTPJFkd5I3DjtfzZQ7cAj4UFWdCpwFXJLkVGAbcHdVnQLc3W2vhFwAV1fVad3X55Y5F8BPgHOq6vXAacDGJGcBV3XZXg18F9iyQnIB\/EXfnD20zLkA3g\/s7tse91wdNjsXjH+uDvvtLsPh12uP+5o8Ui4Y\/zV5DfD5qnot8Hp6v6ZDzVcz5V5VB6rqge7xD+hNyjp6H3uwsztsJ3D+Csk1dtXzw27zxd1XAecAt3fj45izI+UaqyTrgfOA67rtMOa5mivXC8BYr8mVKskrgDcB1wNU1U+r6jmGnK9myr1fkkngdOA+YE1VHeh2PQOsWSG5AN6b5OEkN4zjr6ZdpmOSPAQcBO4C\/ht4rqoOdYfsYwx\/GM3OVVWH5+zD3ZxdneQlyxzro8ClwM+77VeyAuZqjlyHjXOuDivgC0nu7z5yBFbGNTlXLhjvNbkBmAE+0S2xXZfkeIacr+bKPcnLgU8BH6iq7\/fvq97rPsdyBzhHrmuBV9FbdjgA\/MM4clXVz6rqNHrvIj4TeO04csw2O1eS1wGX08v3m8CJwGXLlSfJ24GDVXX\/cp1zIY6Sa2xzNctvVdUZwFvpLUm+qX\/nGK\/JuXKN+5pcBZwBXFtVpwM\/YtYSzCDz1VS5J3kxvQK9qao+3Q0\/m2Rtt38tvTvBseeqqme7Avs58HF6xTo23V\/\/7gHeCKxOcvgNbmP96Ii+XBu7Ja6qqp8An2B55+xs4B1J9tL7lNNz6K2Pjnuunpcryb+Mea5+oar2d98PAp\/pcoz9mpwr1wq4JvcB+\/r+lno7vbIfar6aKfdu\/fN6YHdVfaRv1y5gc\/d4M3DHSsh1+Ber8\/vAo8uZq8swkWR19\/hl9D5\/fze9Mr2gO2wcczZXrif6foOH3rrjss1ZVV1eVeurapLex2l8sareyZjn6gi5\/mCcc3VYkuOT\/NLhx8BbuhzjvibnzDXua7KqngGeTvKabuhc4HGGnK+W\/oPss4F3AY90a7UAVwDbgduSbAGeAi5cIbku7l6eVsBe4E+WORfAWmBnev+5youA26rqs0keB25J8rfAg3T\/wLMCcn0xyQQQ4CHgPcucay6XMd65OpKbVsBcrQE+0\/vzhVXAv1bV55N8lfFek0fK9c8r4Jp8H71fu2OBJ4F3010Dg86XHz8gSQ1qZllGkvR\/LHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUoP8F4cAplUiga2IAAAAASUVORK5CYII=\n",
                    "mimeType":"image\/png",
                    "width":0,
                    "height":0,
                    "type":"plot"
                  }
                ]
              }
            ],
            "meta":{
              
            },
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"d_lst = []\ns_lst = []",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "meta":{
              
            },
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"for i in range(1, 11):\n    d_lst.append(np.mean(try_another_poisson_variant(40, 100 * i)))\nfor i in range(1, 11):\n    s_lst.append(np.mean(try_another_poisson_variant(40, 100)))\n\nprint(d_lst, \"\\n\", s_lst)",
            "outputs":[
              {
                "stdout":"[40.12, 40.095, 39.89, 40.4225, 39.916, 40.145, 39.58857142857143, 39.92625, 39.86888888888889, 39.869] \n [39.54, 40.15, 39.47, 40.26, 39.43, 39.64, 40.11, 39.62, 39.5, 39.96]\n",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "meta":{
              
            },
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          }
        ]
      }
    ],
    "packageManager":"pip",
    "baseEnvironment":"default",
    "packages":[
      
    ],
    "kernelType":"JUPYTER",
    "language":"PYTHON"
  }
}